#include <string>
#include <iostream>
#include <vector>
#include <locale>

using std::cout;
using std::endl;
using std::vector;

enum CalcType { LOCAL = 0, MAP_QUEST };

template < typename Iter >
void range_tolower ( Iter beg, Iter end ) {
	for( Iter iter = beg; iter != end; ++iter ) {
		*iter = std::tolower( *iter );
	}
}

void string_tolower ( std::string & str ) {
	range_tolower( str.begin(), str.end() );
}

class ArgsHandler
{
public:
	ArgsHandler(int argc, char* argv[])
		: args(getArguments(argc, argv))
		, myAlgorithm("bipartite")
		, javaScriptFile("")
		, sendNotifications(false)
		, writeSolutions(false)
		, myCalcType(LOCAL)
		{
			processArgs();
		} 

	void   printHelp() const
	{
		cout << "Controller usage:\n"
			<< "\t--algorithm=<algo>\tSet the algorithm to use for the optimizer\n"
			<< "\t\t\tValues: bipartite, bruteforce, genetic\tDefault: bipartite\n"
			<< "\t--calc-type=<calc>\tSet the type of calculations to "
			<< "perform for distance calculations\n"
			<< "\t\t\tValues: local, mapquest\tDefault: local\n"
			<< "\t--javascript=<file>\tDefine the file to dump solutions in javascript "
			<< "format\n"
			<< "\t\t\tDefault: No javascript file dump\n"
			<< "\t--notify\tTurns on notifications of people in the generated solution\n"
			<< "\t\t\tDefault: Off (No Notification)\n"
			<< "\t--write-solutions\tWrites solutions generated by optimizers to the database\n"
			<< "\t\t\tNote: If this option is turned on, matched route_submissions will no longer be candidates "
			<< "for optimizers\n";

	}

	string getAlgorithm() const { return myAlgorithm; }
	string getJSFile() const { return javaScriptFile; }
	bool   getSendNotifications() const { return sendNotifications; }
	bool   getWriteSolutions() const { return writeSolutions; }
	CalcType  getCalcType() const { return myCalcType; }

protected:
	void processArg(string arg)
	{
		if (arg.find("--algorithm=") == 0 || arg.find("-a=") == 0)
		{
			string algorithm = arg.substr(arg.find("=") + 1);
			string_tolower(algorithm);
			if (algorithm != "bipartite" && algorithm != "genetic" && algorithm != "bruteforce")
			{
				cout<<"Invalid algorithm: " << algorithm<< endl << "\tAvailable optimizers are: \n\t"
					<< "bipartite, genetic, bruteforce";
			}
			else
			{
				myAlgorithm = algorithm;
			}
		}
		else if (arg.find("--calc-type=") == 0 || arg.find("-c=") == 0)
		{
			string calcType = arg.substr(arg.find("=") + 1);
			string_tolower(calcType);
			if (calcType != "local" && calcType != "mapquest")
			{
				cout<<"Invalid calculation type: " << calcType<< endl << "\tAvailable calculation types "
					<< "are: \n\tlocal, mapquest";
			}
			else
			{
				if (calcType == "local")
					myCalcType = LOCAL;
				else if (calcType == "mapquest")
					myCalcType = MAP_QUEST;
			}
		}
		else if (arg.find("--javascript=") == 0 || arg.find("-js=") == 0)
		{
			string jsFile = arg.substr(arg.find("=") + 1);
			string_tolower(jsFile);
			javaScriptFile = jsFile;
		}
		else if (arg.find("--notify") == 0 || arg.find("-n") == 0)
		{
			sendNotifications = true;
		}
		else if (arg.find("--write-solutions") == 0 || arg.find("-w") == 0)
		{
			writeSolutions = true;
		}
		else if (arg.find("--help") == 0 || arg.find("-h") == 0)
		{
			printHelp();
			exit(1);
		}
	}

	void processArgs()
	{
		for(vector<string>::iterator iter = args.begin();
				iter < args.end();
				iter++)
		{
			processArg(*iter);
		}
	}

	vector<string> getArguments(int argc, char* argv[])
	{
		vector<string> returnArgs;
		while(--argc)
		{
			args.push_back(argv[argc]);
		}
		return returnArgs;
	}

private:
	vector<string> args;
	string myAlgorithm;
	string javaScriptFile;
	bool   sendNotifications;
	bool   writeSolutions;
	CalcType myCalcType;

};

